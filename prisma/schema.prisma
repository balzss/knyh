
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Recipe {
  id           String   @id @default(cuid())
  title        String
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ingredients  Json
  instructions Json
  totalTime    String?
  yield        String?
  archived     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // Many-to-many relationship with tags (implicit)
  tags         Tag[]

  @@index([createdAt])
  @@index([archived])
  @@index([userId])
}

model ShoppingListItem {
  id        Int      @id @default(autoincrement())
  text      String
  checked   Boolean  @default(false)
  sortOrder Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sortOrder])
}

model Tag {
  id          String   @id @default(cuid())
  displayName String   @unique
  createdAt   DateTime @default(now())
  // Many-to-many relationship with recipes (implicit)
  recipes     Recipe[]
}

model UserConfig {
  key       String   @id
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // Relations
  sessions      Session[]
  accounts      Account[]
  recipes       Recipe[]
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([providerId, accountId])
  @@index([userId])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@index([expiresAt])
}
